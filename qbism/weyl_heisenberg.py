# AUTOGENERATED! DO NOT EDIT! File to edit: weyl_heisenberg.ipynb (unless otherwise specified).

__all__ = ['clock', 'shift', 'displace', 'weyl_heisenberg_indices', 'displacement_operators', 'weyl_heisenberg_states']

# Cell
def clock(d):
    """
    The clock operator $\hat{Z}$ for dimension $d$.
    """
    w = np.exp(2*np.pi*1j/d)
    return qt.Qobj(np.diag([w**i for i in range(d)]))

# Cell
def shift(d):
    """
    The shift operator $\hat{X}$ for dimension $d$.
    """
    return sum([qt.basis(d, i+1)*qt.basis(d, i).dag()\
                    if i != d-1 else qt.basis(d, 0)*qt.basis(d, i).dag()\
                        for i in range(d) for j in range(d)])/d

# Cell
def displace(d, a, b):
    """
    The displacement operator $D_{a,b}$ for dimension $d$.
    """
    Z, X = clock(d), shift(d)
    return (-np.exp(1j*np.pi/d))**(a*b)*X**b*Z**a

# Cell
def weyl_heisenberg_indices(d):
    return [(a,b) for b in range(d) for a in range(d)]

# Cell
def displacement_operators(d):
    return dict([((a,b), displace(d, a, b)) for a, b in weyl_heisenberg_indices(d)])

# Cell
def weyl_heisenberg_states(fiducial):
    d = fiducial.shape[0]
    D = displacement_operators(d)
    return [D[(a,b)]*fiducial if fiducial.type == "ket" else\
            D[(a,b)]*fiducial*D[(a,b)].dag()\
                for a, b in weyl_heisenberg_indices(d)]