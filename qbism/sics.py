# AUTOGENERATED! DO NOT EDIT! File to edit: sics.ipynb (unless otherwise specified).

__all__ = ['load_fiducial', 'sic_states', 'sic_gram', 'hoggar_fiducial', 'hoggar_indices', 'hoggar_povm']

# Cell
def load_fiducial(d):
    """
    http://www.physics.umb.edu/Research/QBism/solutions.html
    """
    f = pkg_resources.resource_stream(__name__, "sic_povms/d%d.txt" % d)
    fiducial = []
    for line in f:
        if line.strip() != "":
            re, im = [float(v) for v in line.split()]
            fiducial.append(re + 1j*im)
    return qt.Qobj(np.array(fiducial)).unit()

# Cell
def sic_states(d):
    return weyl_heisenberg_states(load_fiducial(d))

# Cell
def sic_gram(d):
    return np.array([[1 if i == j else 1/(d+1) for j in range(d**2)] for i in range(d**2)])

# Cell
def hoggar_fiducial():
    fiducial = qt.Qobj(np.array([-1 + 2j, 1, 1, 1, 1, 1, 1, 1])).unit()
    fiducial.dims = [[2,2,2],[1,1,1]]
    return fiducial

# Cell
def hoggar_indices():
    return list(product([0,1], repeat=6))

# Cell
def hoggar_povm():
    Z, X = clock(2), shift(2)
    indices = hoggar_indices()
    D = dict([(I, qt.tensor(X**I[0]*Z**I[1],\
                            X**I[2]*Z**I[3],\
                            X**I[4]*Z**I[5])) for I in indices])
    fiducial = hoggar_fiducial()
    hoggar_states = [D[I]*fiducial for I in indices]
    return [(1/8)*state*state.dag() for state in hoggar_states]