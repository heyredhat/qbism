# AUTOGENERATED! DO NOT EDIT! File to edit: krauss.ipynb (unless otherwise specified).

__all__ = ['apply_krauss', 'partial_trace_krauss']

# Cell
def apply_krauss(dm, krauss):
	return sum([krauss[j]*dm*krauss[j].dag() for j in range(len(krauss))])

# Cell
def partial_trace_krauss(keep, dims):
    if type(keep) == int:
        keep = [keep]
    trace_over = [i for i in range(len(dims)) if i not in keep]
    indices = [{trace_over[0]:t} for t in range(dims[trace_over[0]])]
    for i in trace_over[1:]:
        new_indices = []
        for t in range(dims[i]):
            new_indices.extend([{**j, **{i: t}} for j in indices])
        indices = new_indices
    return [qt.tensor(*[qt.identity(d) if i in keep else qt.basis(d, index[i]).dag() for i, d in enumerate(dims)]) for index in indices]